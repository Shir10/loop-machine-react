{"version":3,"sources":["store/initialState.js","components/PadsContainer/constants.js","components/Pad/constants.js","components/PadsContainer/reducer.js","store/configureStore.js","components/Pad/actions.js","components/Pad/Pad.js","components/PadsContainer/actions.js","components/PadsContainer/PadsContainer.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["initialState","app","padsContainer","padsStatusArray","pad","recorder","isRecording","PadsContainerConstants","LOAD_PADS_STATUS","PadConstants","CHANGE_PAD_STATUS","HANDLE_TIME_UPDATE","IGNORE_TIME_UPDATE","PadStatus","PadsContainerReducer","state","action","type","payload","RootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","getAudioElement","id","document","getElementById","playAllPendingPads","map","status","i","tmpAudioEl","play","loop","PadActions","changePadStatusAction","newStatus","audioEl","includes","pause","currentTime","filter","length","newPadsStatusArray","handleTimeUpdateAction","paused","Pad","this","props","faStop","faPlay","className","getButtonClasses","onClick","changePadStatus","icon","getButtonIcon","onTimeUpdate","handleTimeUpdate","src","process","Component","connect","dispatch","PadsContainerActions","loadPadsStatusAction","push","PadsContainer","loadPadsStatus","elm","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.15006de0.chunk.js","sourcesContent":["const initialState = {\r\n    app: {\r\n\r\n    },\r\n    padsContainer: {\r\n        padsStatusArray: []\r\n    },\r\n    pad: {\r\n\r\n    },\r\n    recorder: {\r\n        isRecording: false\r\n    }\r\n};\r\n\r\nexport default initialState;","const PadsContainerConstants = {\r\n    LOAD_PADS_STATUS: 'LOAD_PADS_STATUS'\r\n};\r\n\r\nexport default PadsContainerConstants;","const PadConstants = {\r\n    CHANGE_PAD_STATUS: 'CHANGE_PAD_STATUS',\r\n    HANDLE_TIME_UPDATE: 'HANDLE_TIME_UPDATE',\r\n    IGNORE_TIME_UPDATE: 'IGNORE_TIME_UPDATE'\r\n};\r\n\r\nexport default PadConstants;\r\n\r\nconst PadStatus = {\r\n    STOPPING: 'stopping',\r\n    PENDING: 'pending',\r\n    PLAYING: 'playing',\r\n}\r\n\r\nexport { PadStatus };","import initialState from \"../../store/initialState\";\r\nimport PadsContainerConstants from './constants';\r\nimport PadConstants from '../Pad/constants';\r\n\r\nconst PadsContainerReducer = (state = initialState.padsContainer, action) => {\r\n    switch (action.type) {\r\n        case PadsContainerConstants.LOAD_PADS_STATUS:\r\n            return { ...state, padsStatusArray: action.payload.padsStatusArray };\r\n        case PadConstants.CHANGE_PAD_STATUS:\r\n            return { ...state, padsStatusArray: action.payload.padsStatusArray };\r\n        case PadConstants.HANDLE_TIME_UPDATE:\r\n            return { ...state, padsStatusArray: action.payload.padsStatusArray };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default PadsContainerReducer;","import { createStore, combineReducers,  } from 'redux';\r\nimport initialState from \"./initialState\";\r\nimport PadsContainerReducer from '../components/PadsContainer/reducer';\r\n\r\nconst RootReducer = combineReducers({\r\n    padsContainer: PadsContainerReducer,\r\n});\r\n\r\nexport const store = createStore(\r\n    RootReducer,\r\n    initialState,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;","import PadConstants from './constants';\r\nimport { PadStatus } from './constants';\r\n\r\n// Get audio element according the id\r\nexport function getAudioElement(id) {\r\n    return document.getElementById(\"audio-\" + id);\r\n}\r\n\r\n// Play all the pending pads and change their status to playing\r\nfunction playAllPendingPads(padsStatusArray) {\r\n    return padsStatusArray.map((status, i) => {\r\n        if(padsStatusArray[i] === PadStatus.PENDING) {\r\n            const tmpAudioEl = getAudioElement(i+1);\r\n            tmpAudioEl.play();\r\n            tmpAudioEl.loop = true;\r\n            return PadStatus.PLAYING;\r\n        }\r\n        return status;\r\n    });\r\n}\r\n\r\nfunction changePadStatusAction(padsStatusArray, id) {\r\n    // Get audio element according the pad id\r\n    const audioEl = getAudioElement(id);\r\n    let newStatus;\r\n    switch (padsStatusArray[id-1]) {\r\n        // If the pad has a stopping status and there is at least one pad that is pending or playing\r\n        // we should change its status to pending, otherwise to playing and play its loop\r\n        case PadStatus.STOPPING:\r\n            if(padsStatusArray.includes(PadStatus.PLAYING) || padsStatusArray.includes(PadStatus.PENDING)) {\r\n                newStatus = PadStatus.PENDING\r\n            }\r\n            else {\r\n                newStatus =  PadStatus.PLAYING;\r\n                audioEl.play();\r\n                audioEl.loop = true;\r\n            }\r\n            break;\r\n        // If the pad has a pending status we should change its status to stopping\r\n        case PadStatus.PENDING:\r\n            newStatus = PadStatus.STOPPING;\r\n            break;\r\n        // If the pad has a playing status we should change its status to stopping, stop the loop.\r\n        // If there are not other pads that have playing status, we will play all the pending pads\r\n        case PadStatus.PLAYING:\r\n            audioEl.pause();\r\n            audioEl.currentTime = 0;\r\n            newStatus = PadStatus.STOPPING;\r\n            if(padsStatusArray.filter(status => status === PadStatus.PLAYING).length === 1) {\r\n                padsStatusArray = playAllPendingPads(padsStatusArray);\r\n            }\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    const newPadsStatusArray = padsStatusArray.map((status, i) => i === id - 1 ? newStatus : status);\r\n    return {\r\n        type: PadConstants.CHANGE_PAD_STATUS,\r\n        payload: {\r\n            padsStatusArray: newPadsStatusArray\r\n        }\r\n    }\r\n}\r\n\r\nfunction handleTimeUpdateAction(padsStatusArray, id) {\r\n    // Get audio element according the pad id\r\n    const audioEl = getAudioElement(id);\r\n    // If the pad reached the start of the loop (currentTime = 0) by playing the loop (and not by stopping the loop)\r\n    // we should start play all the pending pads\r\n    if(audioEl.currentTime === 0 && audioEl.paused === false) {\r\n        const newPadsStatusArray = playAllPendingPads(padsStatusArray);\r\n        return {\r\n            type: PadConstants.HANDLE_TIME_UPDATE,\r\n            payload: {\r\n                padsStatusArray: newPadsStatusArray\r\n            }\r\n        };\r\n    }\r\n    return {\r\n        type: PadConstants.IGNORE_TIME_UPDATE,\r\n    };\r\n}\r\n\r\nconst PadActions = {\r\n    changePadStatusAction,\r\n    handleTimeUpdateAction\r\n};\r\n\r\nexport default PadActions;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './Pad.css';\r\nimport PadActions from \"./actions\";\r\nimport { PadStatus } from './constants';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faStop } from '@fortawesome/free-solid-svg-icons';\r\n\r\n// Pad component is a square which contains a title and a play/stop button\r\nclass Pad extends Component{\r\n    getButtonClasses() {\r\n        // Get the button's css classes according to the status\r\n        if(this.props.padsStatusArray[this.props.id - 1] !== PadStatus.STOPPING){\r\n            return \"pad-btn stop-btn\";\r\n        }\r\n        return \"pad-btn play-btn\";\r\n    }\r\n\r\n    getButtonIcon() {\r\n        // Get the button's icon according to the status\r\n        if(this.props.padsStatusArray[this.props.id - 1] !== PadStatus.STOPPING){\r\n            return faStop;\r\n        }\r\n        return faPlay;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={\"pad-\" + this.props.id} className=\"pad\">\r\n                <h3 className=\"pad-title\">Loop {this.props.id}</h3>\r\n                <button\r\n                    className={this.getButtonClasses()}\r\n                    onClick={() => this.props.changePadStatus(this.props.padsStatusArray, this.props.id)}\r\n                >\r\n                    <FontAwesomeIcon className=\"pad-icon-btn\" icon={this.getButtonIcon()}/>\r\n                </button>\r\n                <audio id={\"audio-\" + this.props.id} className=\"audio-element\" onTimeUpdate={() => this.props.handleTimeUpdate(this.props.padsStatusArray, this.props.id)}>\r\n                    <source src={process.env.PUBLIC_URL + '/loop_samples/loop-' + this.props.id + '.mp3'}/>\r\n                </audio>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        padsStatusArray: state.padsContainer.padsStatusArray\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changePadStatus: (padsStatusArray, id) => {\r\n            dispatch(PadActions.changePadStatusAction(padsStatusArray, id));\r\n        },\r\n        handleTimeUpdate: (padsStatusArray, id) => {\r\n            dispatch(PadActions.handleTimeUpdateAction(padsStatusArray, id));\r\n        },\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Pad);","import PadsContainerConstants from './constants';\r\nimport { PadStatus } from '../Pad/constants';\r\n\r\nfunction loadPadsStatusAction() {\r\n    const padsStatusArray = [];\r\n    // Initialize the padsStatusArray to stopping status for each pad\r\n    for(let i = 0; i < 9; i++) {\r\n        padsStatusArray.push(PadStatus.STOPPING);\r\n    }\r\n    return {\r\n        type: PadsContainerConstants.LOAD_PADS_STATUS,\r\n        payload: {\r\n            padsStatusArray\r\n        }\r\n    }\r\n}\r\n\r\nconst PadsContainerActions = {\r\n    loadPadsStatusAction\r\n};\r\n\r\nexport default PadsContainerActions;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './PadsContainer.css';\r\nimport Pad from \"../Pad/Pad\";\r\nimport PadsContainerActions from './actions'\r\n\r\n// PadsContainer component contains 9 pads\r\nclass PadsContainer extends Component{\r\n    componentDidMount() {\r\n        this.props.loadPadsStatus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"padsContainer\">\r\n                {this.props.padsStatusArray.map((elm, i) => <Pad id={i+1} />)}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        padsStatusArray: state.padsContainer.padsStatusArray\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        loadPadsStatus: () => {\r\n            dispatch(PadsContainerActions.loadPadsStatusAction());\r\n        }\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PadsContainer);","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport './App.css';\nimport PadsContainer from \"../PadsContainer/PadsContainer\";\n\nclass App extends Component{\n  render() {\n      return (\n          <div className=\"app\">\n              <h1>Loop Machine</h1>\n              <PadsContainer />\n          </div>\n      );\n  }\n}\n\nexport default connect()(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\"\nimport store from \"./store/configureStore\";\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}